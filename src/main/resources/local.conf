akka {
  loglevel = INFO

  actor {
    provider = "cluster"
    warn-about-java-serializer-usage = false
  }

  remote {
  netty.tcp {
        hostname = 127.0.0.1 // Advertise using $HOST_IP
        port = 2551 // Advertise on port $HOST_PORT
      }
  }
}

#coorindated-shutdown
akka.cluster.downing-provider-class = com.ajjpj.simpleakkadowning.SimpleAkkaDowningProvider
akka.cluster.shutdown-after-unsuccessful-join-seed-nodes = 30s
akka.coordinated-shutdown.exit-jvm = on
#coorindated-shutdown

#discovery
akka.discovery {
  config.services = {
    events-management-system = {
      endpoints = [
        {
          host = "127.0.0.1"
          port = 8558
        },
        {
          host = "127.0.0.2"
          port = 8558
        },
        {
          host = "127.0.0.3"
          port = 8558
        }
      ]
    }
  }
}
#discovery

#health
akka.management.health-checks {
  readiness-path = "health/ready"
  liveness-path = "health/alive"
}
#health

akka.management.http {
  route-providers-read-only = false
}

#bootstrap
akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      service-name = "events-management-system"
      discovery-method = config
    }
  }
}
actorsystem.name = "events-management-service"

#https://github.com/arnohaase/simple-akka-downing
simple-akka-downing {

   active-strategy = static-quorum
   #Time it takes to remove cluster singletons/shards in unreachable nodes before they are recreated in the surving nodes
   down-removal-margin = 7s

  #Time margin after which unreachable nodes in a stable cluster state (i.e. no nodes changed
   # their membership state or their reachability) are treated as permanently unreachable, and
  # the split-brain resolution strategy kicks in.
  stable-after = 20s

  static-quorum {
    # minimum number of nodes that the cluster must have
    quorum-size = 2

    # if the 'role' is defined the decision is based only on members with that 'role'
    role = ""
  }
}
app {
  aws {
     envType = "Local"
  }

  cluster {
    httpPort = 8558
    httpPort = ${?HTTP_PORT}

    port = 2552
    port = ${?CLUSTER_PORT}

    hostname = 127.0.0.1
    hostname = ${?HOST}

    name = "akka-events-management-service"
  }

  webapi{
     http{
       port = 8080
       bind-port = 8080
       bind-hostname = 0.0.0.0
       hostname = ${app.cluster.hostname}
     }
  }
}
