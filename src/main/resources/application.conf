akka {
  actor {
    provider = "cluster"
    warn-about-java-serializer-usage = false
  }

  cluster {
       seed-nodes = []
       shutdown-after-unsuccessful-join-seed-nodes = 30s
       downing-provider-class = com.ajjpj.simpleakkadowning.SimpleAkkaDowningProvider
    }
    #coorindated-shutdown
    coordinated-shutdown.exit-jvm = on

  remote {
    log-remote-lifecycle-events = off

    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${?HOST}
      port = 2552
    }
  }
    management {
      cluster.bootstrap {
       #set to on for the initial cluster depolyment and off
       new-cluster-enabled = on
        contact-point-discovery {
          # pick the discovery method you'd like to use:
           discovery-method = aws-api-ecs-async
           service-name = akka-events-service
          #Wait until there are 2 contact points present before attempting initial cluster formation
          required-contact-point-nr = 2
        }

      contact-point {
        # If no port is discovered along with the host/ip of a contact point this port will be used as fallback
        fallback-port = 8558
      }
      http {
          port = 8558
          hostname = ${?HOST}

      }
      #health
      health-checks {
        readiness-path = "health/ready"
        liveness-path = "health/alive"
      }
      #health
    }
  }

  discovery{
      method =aws-api-ecs-async
      aws-api-ecs-async {
            cluster = "production"
          }
  }

}

#https://github.com/arnohaase/simple-akka-downing
simple-akka-downing {

   active-strategy = static-quorum
   #Time it takes to remove cluster singletons/shards in unreachable nodes before they are recreated in the surving nodes
   down-removal-margin = 7s

  #Time margin after which unreachable nodes in a stable cluster state (i.e. no nodes changed
   # their membership state or their reachability) are treated as permanently unreachable, and
  # the split-brain resolution strategy kicks in.
  stable-after = 20s

  static-quorum {
    # minimum number of nodes that the cluster must have
    quorum-size = 2

    # if the 'role' is defined the decision is based only on members with that 'role'
    role = ""
  }
}

app {
  aws {
     envType = "AWS"
     envType = ${?ENV_TYPE}
     ipv4= "http://169.254.169.254/latest/meta-data/local-ipv4"
  }

  cluster {
    httpPort = 8558
    httpPort = ${?HTTP_PORT}

    port = 2552
    port = ${?CLUSTER_PORT}

    hostname = 127.0.0.1
    hostname = ${?HOST}

    name = "akka-events-management-service"
  }

  webapi{
     http{
       port = 8080
       bind-port = 8080
       bind-hostname = 0.0.0.0
       hostname = ${app.cluster.hostname}
     }
  }
}

