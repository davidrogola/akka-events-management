akka {
  actor {
    provider = "cluster"
  }

  cluster {
       seed-nodes = []
       shutdown-after-unsuccessful-join-seed-nodes = 30s
    }
    #coorindated-shutdown
    coordinated-shutdown.exit-jvm = on

  remote {
    log-remote-lifecycle-events = off

    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      bind-hostname=0.0.0.0
      bind-port = 2552
        #${app.cluster.port}
     #  Advertise using $HOST_IP
      hostname = ${?HOST}
      port = 2552
     # ${app.cluster.port} // Advertise on port $HOST_PORT
    }
  }
    management {
      cluster.bootstrap {
       #set to on for the initial cluster depolyment and off
       new-cluster-enabled = on
        contact-point-discovery {
          # pick the discovery method you'd like to use:
           discovery-method = aws-api-ec2-tag-based
           service-name = events-management-service
          #Wait until there are 2 contact points present before attempting initial cluster formation
          required-contact-point-nr = 2
        }

      contact-point {
        # If no port is discovered along with the host/ip of a contact point this port will be used as fallback
        fallback-port = 8558
      }
      http {
          port = 8558
          hostname = ${?HOST}

          bind-port = 8558
          bind-hostname = 0.0.0.0
      }
      #health
      health-checks {
        readiness-path = "health/ready"
        liveness-path = "health/alive"
      }
      #health
    }
  }

  discovery{
      method = aws-api-ec2-tag-based
      aws-api-ec2-tag-based {
            filters = "instance-type=t2.micro;tag:service=events-management-service"
          }
  }

}


app {
  envType = "AWS"
  envType = ${?ENV_TYPE}
  aws_http_endpoint = "http://169.254.169.254/latest/meta-data/local-ipv4"

  cluster {
    httpPort = 8558
    httpPort = ${?HTTP_PORT}

    port = 2552
    port = ${?CLUSTER_PORT}

    hostname = 127.0.0.1
    hostname = ${?HOST}

    name = "events-management-service"
  }

  webapi{
     http{
       port = 8080
       bind-port = 8080
       bind-hostname = 0.0.0.0
       hostname = ${app.cluster.hostname}
     }
  }
}

